LunchClientActivity.java
public class LunchClientActivity extends Activity {
	/** Called when the activity is first created. */
	String str;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		TextView view = (TextView) findViewById(R.id.textview);
		// TextView tv = new TextView(this);
		String xml = HttpHandler.sendGetRequest(str, null);
		if (view != null && xml != null){
			view.setText(xml);
			view.setMovementMethod(new ScrollingMovementMethod());
		}

		setContentView(R.layout.main);
	}

	public void update(View view) {
		TextView tv = (TextView) findViewById(R.id.textview);
		str = ((EditText) findViewById(R.id.textbox)).getText().toString();
		tv.setText(HttpHandler
				.sendGetRequest(str, null));
		tv.setMovementMethod(new ScrollingMovementMethod());
	}
}

httphandler.java
public class HttpHandler {
	/**
	 * Sends an HTTP GET request to a url
	 * 
	 * @param endpoint
	 *            - The URL of the server. (Example:
	 *            " http://www.yahoo.com/search")
	 * @param requestParameters
	 *            - all the request parameters (Example:
	 *            "param1=val1&param2=val2"). Note: This method will add the
	 *            question mark (?) to the request - DO NOT add it yourself
	 * @return - The response from the end point
	 */
	public static String sendGetRequest(String endpoint,
			String requestParameters) {
		String result = null;
		if (endpoint != null) {
			if (endpoint.startsWith("http://")) {
				// Send a GET request to the servlet
				try {
					// Send data
					String urlStr = endpoint;
					if (requestParameters != null
							&& requestParameters.length() > 0) {
						urlStr += "?" + requestParameters;
					}
					URL url = new URL(urlStr);
					URLConnection conn = url.openConnection();
					// Get the response
					BufferedReader rd = new BufferedReader(
							new InputStreamReader(conn.getInputStream()));
					StringBuffer sb = new StringBuffer();
					String line;
					while ((line = rd.readLine()) != null) {
						sb.append(line);
					}
					rd.close();
					result = sb.toString();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return result;
	}

	/**
	 * Reads data from the data reader and posts it to a server via POST
	 * request.
	 * 
	 * data - The data you want to send endpoint - The server's address
	 * 
	 * output - writes the server's response to output
	 * 
	 * @throws Exception
	 */
	public static void postData(Reader data, URL endpoint, Writer output)
			throws Exception {
		HttpURLConnection urlc = null;
		try {
			urlc = (HttpURLConnection) endpoint.openConnection();
			try {
				urlc.setRequestMethod("POST");
			} catch (ProtocolException e) {
				throw new Exception(
						"Shouldn't happen: HttpURLConnection doesn't support POST??",
						e);
			}
			urlc.setDoOutput(true);
			urlc.setDoInput(true);
			urlc.setUseCaches(false);
			urlc.setAllowUserInteraction(false);
			urlc.setRequestProperty("Content-type", "text/xml; charset="
					+ "UTF-8");
			OutputStream out = urlc.getOutputStream();
			try {
				Writer writer = new OutputStreamWriter(out, "UTF-8");
				pipe(data, writer);
				writer.close();
			} catch (IOException e) {
				throw new Exception("IOException while posting data", e);
			} finally {
				if (out != null)
					out.close();
			}
			InputStream in = urlc.getInputStream();
			try {
				Reader reader = new InputStreamReader(in);
				pipe(reader, output);
				reader.close();
			} catch (IOException e) {
				throw new Exception("IOException while reading response", e);
			} finally {
				if (in != null)
					in.close();
			}
		} catch (IOException e) {
			throw new Exception("Connection error (is server running at "
					+ endpoint + " ?): " + e);
		} finally {
			if (urlc != null)
				urlc.disconnect();
		}
	}

	/**
	 * Pipes everything from the reader to the writer via a buffer
	 */
	private static void pipe(Reader reader, Writer writer) throws IOException {
		char[] buf = new char[1024];
		int read = 0;
		while ((read = reader.read(buf)) >= 0) {
			writer.write(buf, 0, read);
		}
		writer.flush();
	}


res/layout/main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:orientation="vertical" 
	android:layout_width="fill_parent"
	android:layout_height="fill_parent">
	
	<EditText 
	android:id="@+id/textbox"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	/>
	<Button 
	android:id="@+id/submit"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:text="Go!"
	android:onClick="update"
	/>
	<TextView xmlns:android="http://schemas.android.com/apk/res/android"
		android:id="@+id/textview" 
		android:layout_width="fill_parent"
		android:layout_height="wrap_content" 
		android:text="@string/hello" 
		android:maxLines="20"
		android:scrollbars="vertical"
	/>
</LinearLayout>

res/values/strings.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="hello">Enter a URL</string>
    <string name="app_name">Lunch Client</string>
</resources>

androidmanifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
      package="edu.neumont.jbass"
      android:versionCode="1"
      android:versionName="1.0">
    <uses-sdk android:minSdkVersion="10" />
	<uses-permission android:name="android.permission.INTERNET"/>
    <application android:icon="@drawable/icon" android:label="@string/app_name">
        <activity android:name=".LunchClientActivity"
                  android:label="@string/app_name">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>
</manifest>
